
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Microsoft Power BI</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge;" />
    <base href="/">
    <meta charset="utf-8">
    <meta name="description" content="">
    <meta name="format-detection" content="telephone=no" />
    <link rel="shortcut icon" href="images/PowerBI_Favicon.ico" />

     <!-- Please do not add any script before this line -->
    <script> function cdnFallback(event) {var date = new Date(); var failedRequestUrl = 'unknown'; var sessionSource = 'unknown'; var statusCode = 'unknown'; var durationMs = 'unknown'; var maxAgeInSeconds = 8 * 60 * 60;if (event && event.currentTarget && event.currentTarget.src) {failedRequestUrl = event.currentTarget.src;}if (failedRequestUrl && typeof this.performance.getEntriesByName === 'function' && this.performance.getEntriesByName(failedRequestUrl)[0]) {statusCode = this.performance.getEntriesByName(failedRequestUrl)[0].responseStatus;durationMs = this.performance.getEntriesByName(failedRequestUrl)[0].duration;}sessionSource = false ? '' : window.sessionSource;try { document.cookie = 'disablecdn=cdnRequestFailureTimestamp:' + date.toUTCString() + '-cdnRequestFailureUrl:' + failedRequestUrl + '-sessionSource:' + sessionSource + '-statusCode:' + statusCode + '-durationMs:' + durationMs + '; max-age=' + maxAgeInSeconds + '; secure; partitioned; samesite=none';} catch (err) {}if (true) { var newUrl = new URL(window.location.href);newUrl.searchParams.set('disablecdnExpiration', String(Math.round(new Date() / 1000 + maxAgeInSeconds)));window.location.href = newUrl.href; } else { window.location.reload(true); } }</script>

    <script type="text/javascript">this.parseTimeMarkers = this.parseTimeMarkers || {}; this.parseTimeMarkers['es6-promise.min.js'] = { nominalStart: Date.now(), start: Date.now(), initial: true }; </script>
<script type="text/javascript" src="https://content.powerapps.com/resource/powerbiwfe/scripts/es6-promise.min.adf8c9fffd201e9cf42f.js"  nomodule  onerror=cdnFallback(event) ></script>
<script type="text/javascript">this.parseTimeMarkers['es6-promise.min.js'].end = Date.now();</script>

    <script>    
        var powerBIAccessToken = '';
        var powerBIAccessTokenExpiry = '';
        var tenantId = '';
        var clusterUri =  'https://api.powerbi.com';

                
                    var powerbi = window.powerbi || {};
                    powerbi.session = {
                        userInfo: {
                            name:  '',
                            givenName: '',
                            surname: '',
                            puid: '',
                            uoid: '',
                            alternateEmail: '',
                            hasAutoAssignedLicense: false
                        }
                    };
                


    
</script>
    <script>
        // If load message arrives before initializing embed router, just save the params in postMessage handler below.
        var loadReportParameters;
        var createReportParameters;
        var showSignInParameters;
        var frontloadParameters;

        var enableAccessTokenCheckForSecureEmbed = true;
        var useMessageHandlerForSecureEmbed = true;

        window.markMessageAsHandled = function(request) {
            request.headers = request.headers || {};
            var handled = request.headers['handled'];
            if (handled) {
                // no changes
                return false;
            }

            request.headers["handled"] = "true";
            return true;
        };
    </script>
    <script>
        var viewLoadingStarted = Date.now();
        var bootstrapIsUsed = false;
        var bootstrapIsDone = false;


        function updateLoadTimestamp(messageData) {
            bootstrapIsUsed = messageData.headers && messageData.headers['bootstrapped'];
            if (bootstrapIsUsed && bootstrapIsDone) {
                viewLoadingStarted = Date.now();
            }
        }



        var isSaasOrPaasEmbed = true;
        var isSecurePublishToWeb = false;
        var uid = '' || 'defaultId';
        var sdkSessionId;
        var sdkVersion;
        var sdkType;
        var performanceOptimization = '' ;
        var registerQueryCallback = '' === "true";
        var globalUseNativePromise = 'false';
        var layoutTheme = 'fluent-no-header-teal';
        var embeddedDemo = 'false' === "true";

        // A promise that will be resolved once we have the telemetry routing info from the BE.
        // AppInsights waits for this promise before initialization.
        var clientTelemetryResolutionPromise = new Promise(function (resolve) {
                window.clientTelemetryResolutionPromiseFunction = resolve;
        });

            
        function autoAuthEnabled() {
            return "".toLowerCase() === "true";
        }
    


        //register for messages from parent window
        if (autoAuthEnabled()) {
           

              
                // Info : Legacy auth flow
                isSecurePublishToWeb = true;
                // We should not enter signup flow from secure embed
                window.clientAuthRequireUserSignUpCheck = false;

                if (useMessageHandlerForSecureEmbed) {
                    window.addEventListener('message', receiveMessageForSecureEmbed, false);
                } else {
                    window.addEventListener('storage', storageEventHandler, false);
                }

                    
        function getReportEmbedSigninButtonAndDisplayContainer() {
            let signInContainer = document.getElementById('pbi-reportembed-signin-content');
            if (signInContainer) {
                var pbiLoadingPlaceholderElement = document.querySelector('#pbiLoadingPlaceholder');
                if (pbiLoadingPlaceholderElement) {
                    pbiLoadingPlaceholderElement.classList.add('displayNone');
                }

                signInContainer.style.display = 'flex';
                return document.getElementById('pbi-reportembed-singin-button');
            }
            return undefined;
        }

        function hideReportEmbedSigninButtonAndDisplayContainer() {
            let signInContainer = document.getElementById('pbi-reportembed-signin-content');
            if (signInContainer && signInContainer.style.display !== 'none') {
                var pbiLoadingPlaceholderElement = document.querySelector('#pbiLoadingPlaceholder');
                if (pbiLoadingPlaceholderElement) {
                    pbiLoadingPlaceholderElement.classList.remove('displayNone');
                }

                signInContainer.style.display = 'none';
            }
        }
    


                window.addEventListener('DOMContentLoaded', function() {
                    if (window.clientAuthEnabled && window.clientAuthSecureEmbedEnabled) {
                        if (window.clientAuthProvider.isInIframe()) {
                            if (window.clientAuthProvider.isSignedIn()) {
                                // While refreshing the page, we might enter into a state when refresh token is expired but isSignedIn is true. 
                                // window.clientAuthProvider.signIn -> acquireTokenSilent fails inside iframe in such a state because it needs usr interaction
                                // Hence we open pop-up to re-authenticate using the interactionHandler
                                let interactionHandler = () => new Promise(function (resolve) {
                                    let button = getReportEmbedSigninButtonAndDisplayContainer(); // Available in SecureEmbedHelper.cshtml
                                    if (button) {
                                        button.addEventListener('click', () => {
                                            resolve();
                                        }, { once: true });
                                    }
                                });
                                window.clientAuthProvider.signIn({ dialogPopup: { enabled: true }, interactionHandler }).then(showSignInOnContentLoaded);
                            } else {
                                showSignInOnContentLoaded();
                            }
                        } else {
                            // For non-iframe scenarios where embed URL can be accessed directly in browser tab,
                            // We do not need pop-ups, hence authentication or re-authenticating through redirect works fine
                            window.clientAuthProvider.signIn().then(showSignInOnContentLoaded);
                        }
                    } else {
                        showSignInOnContentLoaded();
                    }
                });
               
        } else {
            window.addEventListener('message', receiveMessage, false);
        }

        function showSignInOnContentLoaded() {
            // The showSignIn logic needs the scripts to be loaded, so we need to wait on DOMContentLoaded.
            if (autoAuthEnabled()) {
                isSaasOrPaasEmbed = false;

                // Available in SecureEmbedHelper
                hideReportEmbedSigninButtonAndDisplayContainer();

                window.showSignInParameters = {
                    accessToken: powerBIAccessToken,
                    reportId: "dfff5fcc-5a2b-4b28-9c2f-f924b579823f"
                };

                if (window.showSignIn) {
                    window.showSignIn(showSignInParameters);
                }
            }
        }

        function storageEventHandler(evt) {
            switch(evt.key) {
                case 'accessTokenLastRefreshTime':
                    let ctIdFromLocalStorage = localStorage.getItem('ctId');
                    reloadReportForSecureEmbed(ctIdFromLocalStorage);
            }
        }

        function receiveMessageForSecureEmbed(event) {
            if (event && event.origin && event.data) {
                // verify message sender's identity
                if (event.origin === window.location.origin) {
                    let data = event.data;
                    if (data.accessTokenLastRefreshTime > 0) {
                        reloadReportForSecureEmbed(data.ctid);
                    }
                }
            }
        }

        function reloadReportForSecureEmbed(ctIdFromSourceEvent) {
            let ctIdFromUrl = "";

            const isUrlWithoutCtId = isNullOrUndefinedOrWhiteSpaceString(ctIdFromUrl)
                                        && isNullOrUndefinedOrWhiteSpaceString(ctIdFromSourceEvent);

            const isUrlWithCtId = !isNullOrUndefinedOrWhiteSpaceString(ctIdFromUrl)
                                    && !isNullOrUndefinedOrWhiteSpaceString(ctIdFromSourceEvent)
                                    && window.location.href.indexOf(ctIdFromSourceEvent) > -1;

            if (isUrlWithCtId || isUrlWithoutCtId) {
                location.reload();
            }
        }

        function isNullOrUndefinedOrWhiteSpaceString(str) {
            return !str || str.trim() === '';
        }

        var isMobile = '' == "true";

        function startFrontLoadReportEmbed(config) {
            // Disable front-load in auto auth mode.
            if (autoAuthEnabled()) {
                return;
            }

            if (performanceOptimization === "false") {
                return;
            }

            // Front load report embed: resolveCluster, modelsAndExploration and conceptualSchema requests will be sent in parallel
            // to scripts download to improve report embed performance.
            // The promises will replace HttpService calls.

            // Set groupId for front load. for folders use empty groupId
            if ('' == '2') {
                config.groupId = "";
            } else {
                config.groupId = (config.groupId == null || config.groupId == "") ? '' : config.groupId;
            }

            if (config.type === "report") {
                // Initiate promises
                modelsAndExplorationPromise = defer();
                conceptualSchemaPromise = defer();
            }

            trySetClusterUrlFromToken(config);
            if (embedUrlConfig.clusterUrl == null || embedUrlConfig.clusterUrl == "") {
                resolveClusterPromise = defer();
                resolveCluster(config, getModelsAndExplorationAndConceptualSchema);
            } else {
                getModelsAndExplorationAndConceptualSchema(config, embedUrlConfig.clusterUrl);
            }
        }

        //handle message from parent window
        function receiveMessage(event) {
            // Process the message only if it contains data and originates from the parent window.
            // This ensures we're handling valid messages, which are expected to come from the embed SDK in the parent window.
            if (event.data && event.source === window.parent) {
                try {
                    var messageData;
                    try {
                        messageData = JSON.parse(event.data);
                    } catch (e) {
                        messageData = event.data;
                    }

                    if (messageData.headers && Object.keys(messageData.headers).length > 0) {
                        var host = "";
                        uid = messageData.headers['uid'];
                        sdkSessionId = messageData.headers['sdkSessionId'];
                        sdkVersion = messageData.headers['x-sdk-version'];
                        sdkType = host || messageData.headers['x-sdk-type'];
                    }

                    // if the reportController is initalized and the message is in the new format,
                    // loadReport event will be handled by hostCommunicationHelper
                    if (messageData.action === 'loadReport') {
                        // Legacy embed PostMessage handling

                        window.loadReportParameters = {
                            accessToken: messageData.accessToken,
                            id: messageData.reportId,
                            uid: uid,
                            phasedRender: false,
                            additionalODataFilter: messageData.oDataFilter,
                        };

                        if (window.loadReport) {
                            window.loadReport(window.loadReportParameters);
                        }
                    } else if (messageData.method === 'POST' && (messageData.url === '/report/load' || messageData.url === '/report/prepare')) {
                        if (!window.markMessageAsHandled(messageData)) {
                            // Message is already handled.
                            return;
                        }

                        updateLoadTimestamp(messageData);

                        window.loadReportParameters = messageData.body;
                        window.loadReportParameters.uid = uid;
                        if (messageData.url === '/report/prepare')
                        {
                            window.loadReportParameters.phasedRender = true;
                        }

                        if (window.loadReport) {
                            window.loadReport(window.loadReportParameters);
                        }
                    } else if (messageData.method === 'POST' && messageData.url === '/report/create') {
                        if (!window.markMessageAsHandled(messageData)) {
                            // Message is already handled.
                            return;
                        }

                        updateLoadTimestamp(messageData);

                        window.createReportParameters = messageData.body;
                        window.createReportParameters.uid = uid;

                        if (window.createReport) {
                            window.createReport(window.createReportParameters);
                        }
                    }

                    if (messageData.method === 'POST' && messageData.url === '/frontload/config') {
                        // Frontload config is sent after Powerbi-Javascript receive the ready post message
                        frontloadParameters = messageData.body;
                        startFrontLoadReportEmbed(frontloadParameters);
                    }
                }
                catch (e) {
                    var embedReportLoadMessage = {
                        event: 'error',
                        error: 'Invalid message data:'+ e.message,
                    };
                    window.parent.postMessage(JSON.stringify(embedReportLoadMessage), '*');
                    return;
                }
            }
        }
        var baseUrl = window.location.protocol + '//' + window.location.host;
        var powerbi = window.powerbi || {};
        powerbi.telemetrySamplingRules = 'embed';
        powerbi.build = '13.0.24328.59';
        powerbi.buildDetails = '13.0.24328.59';
        powerbi.clientVersion = '2409.4.21074-train';
        powerbi.cvUrl = 'https://pbivisuals.powerbi.com';
        powerbi.visualCDNBlobContainerUrl = 'prod';
        powerbi.common = {};
        powerbi.common.cultureInfo = 'en-US';
        powerbi.common.unmappedCultureInfo = '';
        powerbi.common.formattingLocale = 'en-US';
        var useCDN = 'True';
        var cdnUrl = 'https://content.powerapps.com/resource/powerbiwfe';
        var previousTenantId = '';
        var telemetrySessionId = '3882a458-d038-4b7c-9b6f-865dc5b7032f';
        var sessionSource = "Embed";
        var wfeClusterName = 'app-PBI-WFE-INDIA-CENTRAL-v3';
        var allowTelemetry = true;
        var appInsightsV2InstrKey = 'e43fee4d-90d5-4c2a-a681-cffdd604ad5c';
        var appInsightsV2EndpointUrl = '';
        var initialDashboardContainer = undefined;
        var appLoadError = undefined;
        var isAdmin = "" === "true" ? true : false;
    </script>



    <link rel="stylesheet" href="https://content.powerapps.com/resource/powerbiwfe/styles/reportembed.bundle.min.251fccc8f21258535f85.css" onerror=cdnFallback(event) />

    <script>


        var isPrivateLinkHeaderPresent = false;
        var embedUrlConfig = {"clusterUrl":null,"embedFeatures":null};

        // In PL scenarios, override the cluster with the API Url present in WFE Manifests (Typically api.powerbi.com)
        embedUrlConfig.clusterUrl = isPrivateLinkHeaderPresent ? 'https://api.powerbi.com'
         : ''

        ClusterExtractionFromTokenErrors = {
            SinglePartToken: 'SinglePartToken',
            FailedToDecodeTokenPart: 'FailedToDecodeTokenPart',
            FailedToParseConfig: 'FailedToParseConfig',
            NoClusterUrlInConfig: 'NoClusterUrlInConfig',
        };

        var shouldUseClusterUrlFromEmbedToken = function(isPrivateLinksEnabledForISV, isAccessOverPublicInternetAllowedForISV)
        {


            var useClusterFQDN = "" === "true" ? true : "" === "false" ? false : null;
            if (useClusterFQDN != null)
            {
                return useClusterFQDN;
            }

            if (window.isPrivateLinkHeaderPresent && isPrivateLinksEnabledForISV)
            {
                return false;
            }

            return true;
        }

        // TODO: Task 231825: Use typescript in cshtml code
        var tryExtractClusterConfigFromEmbedToken = function(embedToken, isFrontLoad) {

            // Skip if the cluster has already been extracted from the token.
            // The return value indicates that the cluster extraction happened (success or failure).
            if (window.clusterExtractionResult) {
                return window.clusterExtractionResult;
            }

            // Embed tokens are generated with additional data separated by a '.'.
            // The additional data is for client usage and should not be sent in the request header.
            var clusterExtractionResult = {
                clusterUrl: undefined,
                isPrivateLinksEnabledForISV: undefined,
                isAccessOverPublicInternetAllowedForISV: undefined,
                isFrontLoad: isFrontLoad,
            };

            // Split token in 2 parts
            var embedTokenParts = embedToken.split('.');

            // Check if 2nd part exists
            if (embedTokenParts.length < 2) {
                clusterExtractionResult.error = ClusterExtractionFromTokenErrors.SinglePartToken;
                return clusterExtractionResult;
            }

            // Try to decode base64
            try {
                var base64Decoded = atob(embedTokenParts[1]);
            } catch(ex) {
                clusterExtractionResult.error = ClusterExtractionFromTokenErrors.FailedToDecodeTokenPart;
                return clusterExtractionResult;
            }

            // Parse decoded string
            var embedTokenAdditionalConfig;
            try {
                embedTokenAdditionalConfig = JSON.parse(base64Decoded);
            } catch(ex) {
                clusterExtractionResult.error = ClusterExtractionFromTokenErrors.FailedToParseConfig;
                return clusterExtractionResult;
            }

            // Extract token
            var clusterUrlInToken = embedTokenAdditionalConfig.clusterUrl;
            if (clusterUrlInToken == null) {
                clusterExtractionResult.error = ClusterExtractionFromTokenErrors.NoClusterUrlInConfig;
                return clusterExtractionResult;
            };

            clusterExtractionResult.clusterUrl = clusterUrlInToken;
            clusterExtractionResult.isPrivateLinksEnabledForISV = !!embedTokenAdditionalConfig.privateLinksEnabled;
            clusterExtractionResult.isAccessOverPublicInternetAllowedForISV = !!embedTokenAdditionalConfig.allowAccessOverPublicInternet;
            return clusterExtractionResult;
        };
    </script>


        <script>
        var resolveClusterPromise;

        var clusterResolutionFrontLoadStartTime = null;
        var clusterResolutionFrontLoadEndTime = null;

        const tokenPrefix = ['Bearer ', 'EmbedToken '];
        const unknownErrorCode = 500;
        const resolveClusterPrefix = "resolveCluster";
        const myWorkspaceFolderId = 'me';

        function resolveCluster(config, nextFrontloadCall) {
            try {
                clusterResolutionFrontLoadStartTime = Date.now();
                var activityId = telemetrySessionId;
                var requestId = 'c98a7904-c09f-4021-a196-8ffe5dd7563b';

                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function() {
                    try {
                        var status = xhr.status;
                        if (xhr.readyState == XMLHttpRequest.DONE) {
                            clusterResolutionFrontLoadEndTime = Date.now();
                            if (isSuccess(status)) {
                                var response = xhrBuildResponse(xhr, activityId, requestId);
                                if (response.data.clusterUrl || response.data.backendUrl) {
                                    resolvedClusterUri = response.data.clusterUrl || response.data.backendUrl;
                                    resolveClusterPromise.resolve(response);
                                    nextFrontloadCall(config, resolvedClusterUri);
                                } else {
                                    resolveClusterPromise.reject(buildExceptionResponse(activityId, requestId, {message: "clusterUrl and backendUrl are empty"}, resolveClusterPrefix));
                                }
                            } else {
                                try {
                                    resolveClusterPromise.reject(xhrBuildResponse(xhr, activityId, requestId, true /*isError*/));
                                }
                                catch (e) {
                                    console.error("error while rejecting promise: " + e);
                                    // Cannot parse an error out of the response
                                    resolveClusterPromise.reject(buildExceptionResponse(activityId, requestId, e, resolveClusterPrefix));
                                }
                            }
                        }
                    }
                    catch (e) {
                        console.error(e);
                        resolveClusterPromise.reject(buildExceptionResponse(activityId, requestId, e, resolveClusterPrefix));
                    }
                }

                var url;
                if (isSaaSEmbedWithAADToken(config)) {
                    url = clusterUri + "/powerbi/globalservice/v201606/clusterdetails";
                }
                else {
                    url = clusterUri + "/metadata/cluster";
                }

                xhr.open("GET", url);
                setGETRequestHeaders(xhr, telemetrySessionId, requestId, config);
                xhr.send();
            }
            catch (e) {
                console.error(e);
                resolveClusterPromise.reject(buildExceptionResponse(activityId, requestId, e, resolveClusterPrefix));
            }
        }

        function trySetClusterUrlFromToken(config) {
            if (config.tokenType == 1 /*EmbedToken*/)
            {
                window.clusterExtractionResult = tryExtractClusterConfigFromEmbedToken(config.accessToken, true /* isFrontLoad */);
                
                // Override embed url config's clusterUrl with clusterUrl extracted from token since it might be more accurate
                if (window.clusterExtractionResult &&
                    window.clusterExtractionResult.clusterUrl &&
                    shouldUseClusterUrlFromEmbedToken(window.clusterExtractionResult.isPrivateLinksEnabledForISV, window.clusterExtractionResult.isAccessOverPublicInternetAllowedForISV))
                {
                    embedUrlConfig.clusterUrl = window.clusterExtractionResult.clusterUrl;
                }
            }
        }

        function setGETRequestHeaders(xhr, activityId, requestId, config) {
            xhr.setRequestHeader('Accept', 'application/json');
            xhr.setRequestHeader('ActivityId', activityId);
            xhr.setRequestHeader('RequestId', requestId);

            // Default token type is Aad (0)
            var tokenType = config.tokenType || 0;
            xhr.setRequestHeader('Authorization', tokenPrefix[tokenType] + config.accessToken);
            if (isSaaSEmbedWithAADToken(config))
                xhr.setRequestHeader('X-PowerBI-HostEnv', 'Embed for Organization');
            else
                xhr.setRequestHeader('X-PowerBI-HostEnv', 'Embed for Customers');
            if (config.tenantVerification)
                xhr.setRequestHeader('X-PowerBI-Tenant-Verification', config.tenantVerification);
            if (config.type === 'quickCreate') {
                xhr.setRequestHeader('X-PowerBI-Auto-License-Info', 'AutoLicenseAssignmentSupported');
            }
        }

        function setPOSTRequestHeaders(xhr, activityId, requestId, config) {
            setGETRequestHeaders(xhr, activityId, requestId, config);
            xhr.setRequestHeader('Content-Type', 'application/json');
        }

        function isSaaSEmbedWithAADToken(config) {
            // Default token type is Aad (0)
            const tokenType = config.tokenType || 0;
            return (window.isSaasOrPaasEmbed === true) && (tokenType === 0);
        }

        function defer() {
            var res, rej;

            var promise = new Promise(function (resolve, reject) {
                res = resolve;
                rej = reject;
            });

            promise.resolve = function (result) {
                res(result);
            };

            promise.reject = function (error) {
                rej(error);
            };

            return promise;
        }

        // we need to fill in an object that looks like IHttpResult from Typings\iHttpService.d.ts
        function xhrBuildResponse(xhr, activityId, requestId, isError) {
            const headerMap = {};

            try {
                // instructions to extract headers here: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders
                // Get the raw header string
                const headers = xhr.getAllResponseHeaders();

                // Convert the header string into an array
                // of individual headers
                const arr = headers.trim().split(/[\r\n]+/);

                // Create a map of header names to values
                arr.forEach((line) => {
                    const parts = line.split(": ");
                    const header = parts.shift();
                    const value = parts.join(": ");
                    headerMap[header] = value;
                });
            }
            catch(e) {
                console.error("error parsing request headers: " + e);
            }

            var response = {
                activityId: activityId,
                requestId: requestId,
                status: xhr.status,
                headers: (headerName) => headerMap[headerName],
            };

            xhrResponse = xhr.response && JSON.parse(xhr.response);
            if (!isError)
                response["data"] = xhrResponse;
            else
                response["error"] = xhrResponse && xhrResponse.error;

            return response;
        }

        function buildExceptionResponse(activityId, requestId, exception, prefix, status) {
            return {
                activityId: activityId,
                requestId: requestId,
                status: status || unknownErrorCode,
                error: {
                    message: prefix + " Exception: " + exception.message,
                    code: "FrontLoadException",
                },
            }
        }

        function isSuccess(status) {
            return status >= 200 && status < 300;
        }
    </script>

    <script>
    var modelsAndExplorationPromise;
    var conceptualSchemaPromise;
    var conceptualSchemaRequestId;
    var conceptualSchemaResponse;

    var modelsAndExplorationFrontLoadStartTime = null;
    var modelsAndExplorationFrontLoadEndTime = null;
    var conceptualSchemaFrontLoadStartTime = null;
    var conceptualSchemaFrontLoadEndTime = null;

    const modelsAndExplorationPrefix = "modelsAndExploration";
    const conceptualSchemaPrefix = "conceptualSchema";

    function getModelsAndExploration(config, resolvedClusterUri) {
        if (!modelsAndExplorationPromise || !config.id || config.id.indexOf("-") === -1) {
            // This happens in cases where getModelsAndExploration is not needed, like QnA embed.
            return;
        }

        try {
            modelsAndExplorationFrontLoadStartTime = Date.now();
            var activityId = telemetrySessionId;
            var requestId = '298ceed3-8686-4e6d-b7bf-803a51c78a34';
            url = resolvedClusterUri + "/explore/reports/" + config.id + `/modelsAndExploration?preferReadOnlySession=true${window.isMobile ? '&mobileStateEnabled=true' : ''}`;
            if (config.datasetBinding && config.datasetBinding.datasetId) {
                url += "&datasetObjectId=" + config.datasetBinding.datasetId;
            }

            if (isSaaSEmbedWithAADToken(config) && config.settings && config.settings.personalBookmarksEnabled) {
                url += "&defaultBookmarkEnabled=true";
            }

            url += "&skipQueryData=true";

            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                try {
                    var status = xhr.status;
                    if (xhr.readyState == XMLHttpRequest.DONE) {
                        modelsAndExplorationFrontLoadEndTime = Date.now();
                        if (isSuccess(status)) {
                            var response = xhrBuildResponse(xhr, activityId, requestId);
                            modelsAndExplorationPromise.resolve(response);
                            modelsAndExplorationRequestId = requestId;
                        } else {
                            if (modelsAndExplorationPromise) {
                                try {
                                    modelsAndExplorationPromise.reject(xhrBuildResponse(xhr, activityId, requestId, true /*isError*/));
                                }
                                catch (e) {
                                    console.error(e);
                                    // Cannot parse an error out of the response
                                    modelsAndExplorationPromise.reject(buildExceptionResponse(activityId, requestId, e, modelsAndExplorationPrefix, status));
                                }
                            }
                        }
                    }
                }
                catch (e) {
                    console.error(e);
                    if (modelsAndExplorationPromise) {
                        modelsAndExplorationPromise.reject(buildExceptionResponse(activityId, requestId, e, modelsAndExplorationPrefix));
                    }
                }
            }

            xhr.open("GET", url);
            setGETRequestHeaders(xhr, telemetrySessionId, requestId, config);
            xhr.send();
        }
        catch (e) {
            console.error(e)
            if (modelsAndExplorationPromise) {
                modelsAndExplorationPromise.reject(buildExceptionResponse(activityId, requestId, e, modelsAndExplorationPrefix));
            }
        }
    }

    function getConceptualSchema(config, resolvedClusterUri, modelsAndExploration) {
        if (!conceptualSchemaPromise) {
            // This happens in cases where getConceptualSchema is not needed, like QnA embed.
            return;
        }

        try {
            conceptualSchemaFrontLoadStartTime = Date.now();

            var activityId = telemetrySessionId;
            var requestId = 'd0c99f1c-dc06-4b5f-81b5-411ddd9e2e51';

            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                try {
                    conceptualSchemaFrontLoadEndTime = Date.now();
                    var status = xhr.status;
                    if (xhr.readyState == XMLHttpRequest.DONE) {
                        if (isSuccess(status)) {
                            var data = JSON.parse(xhr.responseText);
                            conceptualSchemaDuration = conceptualSchemaFrontLoadEndTime - conceptualSchemaFrontLoadStartTime;
                            conceptualSchemaRequestId = requestId;

                            var schemas;
                            if (data.schemas) {
                                // Get schemas by model Id return an array of schemas in schemas property.
                                schemas = data.schemas;
                            } else {
                                // Get schema by report Id returns only one schema - which is the response body.
                                // Add schema to an array in order to run successfully in the same flow as get schemas by model Id.
                                schemas = [data];
                            }

                            if (conceptualSchemaPromise) {
                                conceptualSchemaPromise.resolve({
                                    schemas: schemas,
                                    requestId: requestId
                                });
                            }
                        } else if (conceptualSchemaPromise) {
                            try {
                                var error = JSON.parse(xhr.response);
                                conceptualSchemaPromise.reject({
                                    requestId: requestId,
                                    error: error,
                                    status: xhr.status,
                                    schemas: undefined,
                                });
                            }
                            catch (e) {
                                console.error(e);
                                // Cannot parse an error out of the response
                                conceptualSchemaPromise.reject(buildExceptionResponse(activityId, requestId, e, conceptualSchemaPrefix, status));
                            }
                        }
                    }
                }
                catch (e) {
                    console.error(e);
                    if (conceptualSchemaPromise && conceptualSchemaPromise.reject) {
                        conceptualSchemaPromise.reject(buildExceptionResponse(activityId, requestId, e, conceptualSchemaPrefix));
                    }
                }
            }

            const userPreferredLocale = powerbi.common.unmappedCultureInfo;

            // Request should be:
            // GET /explore/reports/<report guid>/conceptualschema.
            if (config.datasetBinding && config.datasetBinding.datasetId) {
                url = resolvedClusterUri + "/explore/conceptualschema";
                var data = JSON.stringify({
                    ModelObjectIds: [config.datasetBinding.datasetId],
                    userPreferredLocale: userPreferredLocale
                });

                xhr.open("POST", url);
                setPOSTRequestHeaders(xhr, telemetrySessionId, requestId, config);
                xhr.send(data);
            } else if (config.id && config.id.indexOf("-") !== -1) {
                url = resolvedClusterUri + "/explore/reports/" + config.id + "/conceptualschema?userPreferredLocale=" + userPreferredLocale;
                xhr.open("GET", url);
                setGETRequestHeaders(xhr, telemetrySessionId, requestId, config);
                xhr.send();
            }
        } catch (e) {
            console.error(e);
            if (conceptualSchemaPromise) {
                conceptualSchemaPromise.reject(buildExceptionResponse(activityId, requestId, e, conceptualSchemaPrefix));
            }
        }
    }

    function getModelsAndExplorationAndConceptualSchema(config, resolvedClusterUri) {
        getModelsAndExploration(config, resolvedClusterUri);
        getConceptualSchema(config, resolvedClusterUri, null /* modelsAndExplorationResponse */);
    }
</script>

    <script>
        certifiedTelemetryEmbed = true;
        usageMetricsVNext = embedUrlConfig && embedUrlConfig.embedFeatures && embedUrlConfig.embedFeatures.usageMetricsVNext;
    </script>
</head>
<body>
    <div id="pbiLoadingPlaceholder" class="displayNone">
        <div id="pbi-svg-loading" class="wfe-loading"><div class="pbi-svg-item"><img alt="Power BI loading" src="https://content.powerapps.com/resource/powerbiwfe/images/spinner-PBI-logo.6434e0fca135a582c323.svg" width="61" height="81"/><div class="shine"></div></div></div>
    </div>

    <div id="pbi-reportembed-signin-content" style="display: none; height: 100%; width: 100%; flex-direction: column; justify-content: center; align-items: center; font-family:Segoe UI Light; background-color: rgb(255, 255, 255); color: rgb(102, 102, 102)">
        <div class="header" style="display: flex; align-items: center">
            <img src="13.0.24328.59/images/PowerBI96x96.png"
                 alt="Microsoft Power BI"
                 id="pbi-logo"
                 style="width: 44px; height: 44px" />
            <span class="powerBILogoText" style="padding-left: 16px; font-size: 28px; font-weight: 100;">Power BI</span>
        </div>
        <div class="content" style="display: flex; flex-direction: column; align-items: center; font-weight: 100;">
            <span class="content-message" style="margin: 23px 0;">
                Sign in to view this report
            </span>
            <button id="pbi-reportembed-singin-button" type="button" class="primary pbi-fluent-button" style="border-radius:4px;">
                <label class="typeRamp group2-option7-color formLabel" style="cursor: inherit;">
                    Sign in
                </label>
            </button>
        </div>
    </div>


    <div id='pbiAppPlaceHolder' style="height: 100%">
        <!-- check for login as a part of loading report embed controller -->
        <report-embed></report-embed>
    </div>

    <script>
        // 'pbiLoadingPlaceholder' acts as a wrapper and is displayed only when scripts are enabled.
        // This makes sure loading screen is displayed only if scripts are enabled.
        // If scripts are disabled the 'noscript' tag is displayed with the error message
        var pbiLoadingPlaceholderElement = document.querySelector('#pbiLoadingPlaceholder');
        pbiLoadingPlaceholderElement.classList.remove('displayNone');

        if (uid !== 'defaultId') {
            // Ready message is sent to the Powerbi-Javascript, in order to start report embed front load
            window.parent.postMessage({method: "POST", url: '/ready/' + uid}, '*');
        }
    </script>

    <script type="text/javascript">this.parseTimeMarkers = this.parseTimeMarkers || {}; this.parseTimeMarkers['jquery.globalize/globalize.min.js'] = { nominalStart: Date.now(), start: Date.now(), initial: true }; </script>
<script type="text/javascript" src="https://content.powerapps.com/resource/powerbiwfe/scripts/jquery.globalize/globalize.min.8e8ec43af69cf3d5d7aa.js" defer   onerror=cdnFallback(event) ></script>
<script type="text/javascript">this.parseTimeMarkers['jquery.globalize/globalize.min.js'].end = Date.now();</script>
<script type="text/javascript">this.parseTimeMarkers = this.parseTimeMarkers || {}; this.parseTimeMarkers['jquery.globalize/globalize.culture.en-US.js'] = { nominalStart: Date.now(), start: Date.now(), initial: true }; </script>
<script type="text/javascript" src="https://content.powerapps.com/resource/powerbiwfe/scripts/jquery.globalize/globalize.culture.en-US.07ca294f77f622a072a5.js" defer   onerror=cdnFallback(event) ></script>
<script type="text/javascript">this.parseTimeMarkers['jquery.globalize/globalize.culture.en-US.js'].end = Date.now();</script>
    <script>

        powerbi.common.localizedStrings = '';
    </script>
<script type="text/javascript">this.parseTimeMarkers = this.parseTimeMarkers || {}; this.parseTimeMarkers['hash-manifest.js'] = { nominalStart: Date.now(), start: Date.now(), initial: true }; </script>
<script type="text/javascript" src="13.0.24328.59/scripts/hash-manifest.js" defer   onerror=cdnFallback(event) ></script>
<script type="text/javascript">this.parseTimeMarkers['hash-manifest.js'].end = Date.now();</script>
<script type="text/javascript">this.parseTimeMarkers = this.parseTimeMarkers || {}; this.parseTimeMarkers['reportembed.externals.bundle.min.js'] = { nominalStart: Date.now(), start: Date.now(), initial: true }; </script>
<script type="text/javascript" src="https://content.powerapps.com/resource/powerbiwfe/scripts/reportembed.externals.bundle.min.e782bfa616f5fc15c0f2.js" defer   onerror=cdnFallback(event) ></script>
<script type="text/javascript">this.parseTimeMarkers['reportembed.externals.bundle.min.js'].end = Date.now();</script>
<script type="text/javascript">this.parseTimeMarkers = this.parseTimeMarkers || {}; this.parseTimeMarkers['stylelibrary.min.js'] = { nominalStart: Date.now(), start: Date.now(), initial: true }; </script>
<script type="text/javascript" src="https://content.powerapps.com/resource/powerbiwfe/scripts/stylelibrary.min.33d105c5392a5e30d817.js" defer   onerror=cdnFallback(event) ></script>
<script type="text/javascript">this.parseTimeMarkers['stylelibrary.min.js'].end = Date.now();</script>
<script type="text/javascript">this.parseTimeMarkers = this.parseTimeMarkers || {}; this.parseTimeMarkers['reportEmbed.vendors.min.js'] = { nominalStart: Date.now(), start: Date.now(), initial: true }; </script>
<script type="text/javascript" src="https://content.powerapps.com/resource/powerbiwfe/scripts/reportEmbed.vendors.min.398371f67bac224891e2.js" defer   onerror=cdnFallback(event) ></script>
<script type="text/javascript">this.parseTimeMarkers['reportEmbed.vendors.min.js'].end = Date.now();</script>
<script type="text/javascript">this.parseTimeMarkers = this.parseTimeMarkers || {}; this.parseTimeMarkers['reportEmbed.min.js'] = { nominalStart: Date.now(), start: Date.now(), initial: true }; </script>
<script type="text/javascript" src="https://content.powerapps.com/resource/powerbiwfe/scripts/reportEmbed.min.895b2180f61d74d6fd70.js" defer   onerror=cdnFallback(event) ></script>
<script type="text/javascript">this.parseTimeMarkers['reportEmbed.min.js'].end = Date.now();</script>
<script type="text/javascript">this.parseTimeMarkers = this.parseTimeMarkers || {}; this.parseTimeMarkers['jquery-ui.min.js'] = { nominalStart: Date.now(), start: Date.now(), initial: true }; </script>
<script type="text/javascript" src="https://content.powerapps.com/resource/powerbiwfe/scripts/jquery-ui.min.54471b21b524931a54a1.js" defer   onerror=cdnFallback(event) ></script>
<script type="text/javascript">this.parseTimeMarkers['jquery-ui.min.js'].end = Date.now();</script>


    <noscript>
        <div class="noScriptContainer">
            <section class="noScriptErrorContainer">
                <span class="noScriptErrorText">The sandbox is too restrictive and preventing correct functioning.</span>
            </section>
        </div>
    </noscript>

    <script>
        bootstrapIsDone = true;
    </script>
</body>
</html>
